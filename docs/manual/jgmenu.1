.\" Automatically generated by Pandoc 1.17.2
.\"
.TH "JGMENU" "1" "29 August, 2019" "" ""
.hy
.SH NAME
.PP
jgmenu \- A simple X11 menu
.SH SYNOPSIS
.PP
jgmenu\ [\-\-no\-spawn]\ [\-\-checkout=<\f[I]tag\f[]>]\ [\-\-config\-file=<\f[I]file\f[]>]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-icon\-size=<\f[I]size\f[]>] [\-\-at\-pointer]
[\-\-hide\-on\-startup]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-simple] [\-\-vsimple] [\-\-csv\-file=<\f[I]file\f[]>]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-csv\-cmd=<\f[I]command\f[]>] [\-\-die\-when\-loaded]
.PD 0
.P
.PD
\ \ \ \ \ \ \ [\-\-center]
.PP
jgmenu init [\-\-help | <\f[I]options\f[]>]
.PP
Use these commands to get started
.IP \[bu] 2
\f[C]jgmenu_run\f[] to launch menu
.IP \[bu] 2
\f[C]jgmenu\ init\f[] to create config file ~/.config/jgmenu/jgmenurc
.IP \[bu] 2
\f[C]jgmenu\ init\ \-i\f[] to enter interactive setup
.IP \[bu] 2
\f[C]man\ jgmenututorial\f[] to read step\-by\-step guide
.SH DESCRIPTION
.PP
\f[C]jgmenu\f[] is a simple menu for Linux/BSD.
It reads CSV menu data from a file and generates a graphical menu on an
X11 window.
.PP
Each line of CSV menu data is parsed into the following fields using
comma as a field separator:
.IP "(1)" 4
description
.IP "(2)" 4
command
.IP "(3)" 4
icon
.IP "(4)" 4
working directory
.IP "(5)" 4
metadata
.PP
Empty lines and lines beginning with \f[C]#\f[] are ignored.
When the user selects an item by left\-clicking or pressing enter), the
\f[C]command\f[] of that selection is executed as a new process.
.PP
For example:
.IP
.nf
\f[C]
printf\ "Terminal,xterm\\nWeb\ Browser,firefox"\ |\ jgmenu\ \-\-vsimple
\f[]
.fi
.PP
A field can be triple quotes in order to allow commas within that field.
For example:
.IP
.nf
\f[C]
foo,"""^pipe(find\ .\ \-printf\ \[aq]%f,display\ %p,%p\\n\[aq])"""
\f[]
.fi
.SS Markup
.PP
The syntax ^foo(bar) is used to carry out action \f[C]foo\f[] with
argument \f[C]bar\f[].
.PP
The following markup is supported in the \f[I]description\f[] field:
.IP \[bu] 2
\f[C]sep()\f[] define a separator (with or without text)
.PP
The following markup is supported in the \f[I]command\f[] field:
.IP \[bu] 2
\f[C]^tag()\f[] define a submenu (can be in the \f[I]description\f[]
field if no other field is defined on that line)
.IP \[bu] 2
\f[C]^checkout()\f[] open a submenu in a new window
.IP \[bu] 2
\f[C]^root()\f[] open a submenu in the root window, replacing the
current menu
.IP \[bu] 2
\f[C]^sub()\f[] draw a "submenu" arrow
.IP \[bu] 2
\f[C]^back()\f[] check\-out parent menu
.IP \[bu] 2
\f[C]^term()\f[] run program in terminal
.IP \[bu] 2
\f[C]^pipe()\f[] execute sub\-process and checkout a menu based on its
stdout.
.IP \[bu] 2
\f[C]^filter()\f[] invoke search
.SS Icons
.PP
Icons will be displayed if the third field is populated, for example:
.IP
.nf
\f[C]
Terminal,xterm,utilities\-terminal
Firefox,firefox,firefox
\f[]
.fi
.SH OPTIONS
.TP
.B \-\-no\-spawn
Redirect command to stdout rather than execute it.
.RS
.RE
.TP
.B \-\-checkout=<\f[I]tag\f[]>
Checkout submenu <\f[I]tag\f[]> on startup.
.RS
.RE
.TP
.B \-\-config\-file=<\f[I]file\f[]>
Read config file.
.RS
.RE
.TP
.B \-\-icon\-size=<\f[I]size\f[]>
Specify icon size (22 by default).
If set to 0, icons will not be loaded.
.RS
.RE
.TP
.B \-\-at\-pointer
Launch menu at mouse pointer.
.RS
.RE
.TP
.B \-\-hide\-on\-startup
Start menu is hidden state.
.RS
.RE
.TP
.B \-\-simple
Ignore tint2 settings; Run in \[aq]short\-lived\[aq] mode (i.e.
exit after mouse click or enter/escape); read menu items from
\f[I]stdin\f[].
.RS
.RE
.TP
.B \-\-vsimple
Same as \-\-simple, but also disables icons and ignores jgmenurc.
.RS
.RE
.TP
.B \-\-csv\-file=<\f[I]file\f[]>
Specify menu file (in jgmenu flavoured CSV format).
If file cannot be opened, input is reverted to \f[I]stdin\f[].
.RS
.RE
.TP
.B \-\-csv\-cmd=<\f[I]command\f[]>
Specify command to produce menu data, for example
\f[C]jgmenu_run\ pmenu\f[]
.RS
.RE
.TP
.B \-\-die\-when\-loaded
Open menu and then exit(0).
Useful for debugging and testing.
.RS
.RE
.TP
.B \-\-center
Center align menu horizontally and vertically.
Also set \f[C]tint2_look=0\f[] to disable alignment to tint2 panel
.RS
.RE
.SH USER INTERFACE
.IP \[bu] 2
Up/Down \- select previous/next item
.IP \[bu] 2
Left/Right \- move to parent/sub menu
.IP \[bu] 2
PgUp/PgDn \- scroll up/down by one menu\[aq]s worth of items
.IP \[bu] 2
Home/End \- select first/last item
.IP \[bu] 2
Enter \- select an item or open a submenu
.IP \[bu] 2
F5 \- restart
.IP \[bu] 2
F8 \- print node tree to stderr
.IP \[bu] 2
F9 \- exit(1)
.IP \[bu] 2
F10 \- exit(0)
.IP \[bu] 2
Backspace \- return to parent menu
.PP
Type any string to invoke a search.
Words separated by space will be searched for using OR logic (i.e.
the match of either word is sufficient to display an item).
.SH CONFIGURATION FILE
.PP
If no file is specified using the \-\-config\-file= option, the XDG Base
Directory Specification is adhered to.
I.e:
.IP \[bu] 2
Global config in \f[C]${XDG_CONFIG_DIRS:\-/etc/xdg}\f[]
.IP \[bu] 2
User config override in \f[C]${XDG_CONFIG_HOME:\-$HOME/.config}\f[]
.PP
For most users ~/.config/jgmenu/jgmenurc is appropriate.
.PP
Global config variables are set in the following order (i.e.
bottom of list has higher precedence):
.IP \[bu] 2
built\-in defaults (config.c)
.IP \[bu] 2
tint2rc config file (can be specified by \f[C]TINT2_CONFIG\f[]
environment variable
.IP \[bu] 2
jgmenurc config file (can be specified by \-\-config\-file=)
.IP \[bu] 2
command line arguments
.SS Syntax
.PP
Lines beginning with \f[C]#\f[] are ignored.
.PP
All other lines are recognised as setting variables in the format
.IP
.nf
\f[C]
*key*\ =\ *value*
\f[]
.fi
.PP
White spaces are mostly ignored.
.SS Values
.PP
Unless otherwise specified, values as treated as simple strings.
.PP
Here follow some specific types:
.PP
\f[C]boolean\f[]: When a variable takes a boolean value, only 0 and 1
are accepted.
0 means false; 1 means true.
.PP
\f[C]integer\f[]: When a variable takes an integer value, only numerical
values are accepted.
The only valid characters are digits (0\-9) and minus\-sign.
All integer variables relating to geometry and position are interpreted
as pixel values unless otherwise specified.
.PP
\f[C]color\f[]: When a variable takes a color value, only the syntax
\f[C]#rrggbb\ aaa\f[] is recognised, where \f[C]rr\f[], \f[C]gg\f[] and
\f[C]bb\f[] represent hexadecimal values (00\-ff) for the colours red,
green and blue respectively; and \f[C]aaa\f[] stands for the alpha
channel value expressed as a percentage (0\-100) (i.e.
100 means no transparency and 0 means fully transparent.) For example
\f[C]#ff0000\ 100\f[] represents red with no transparency, whereas
\f[C]#000088\ 50\f[] means dark blue with 50% transparency.
.PP
\f[C]pathname\f[]: When a variable takes a pathname value, it is
evaluated as a string.
If the first character is tilde (~), it will be replaced by the the
environment variable $HOME just as a shell would expand it.
.SS Variables
.TP
.B \f[C]verbosity\f[] = \f[B]integer\f[] (default 0)
General verbosity: (0) warnings only; (1) basic info; (2) more info; (3)
max info
.RS
.PP
Additional specific topics: (4) IPC
.PP
Note: Some IPC messages need environment variable
\f[C]JGMENU_VERBOSE=4\f[] too
.RE
.TP
.B \f[C]stay_alive\f[] = \f[B]boolean\f[] (default 1)
If set to 1, the menu will "hide" rather than "exit" when the following
events occur: clicking on menu item; clicking outside the menu; pressing
escape.
When in the hidden mode, a USR1 signal will "un\-hide" the menu.
.RS
.RE
.TP
.B \f[C]hide_on_startup\f[] = \f[B]boolean\f[] (default 0)
If set to 1, jgmenu start in "hidden" mode.
This is useful for starting jgmenu during the boot process and then
sending a \f[C]killall\ \-SIGUSR1\ jgmenu\f[] to show the menu.
.RS
.RE
.TP
.B \f[C]csv_cmd\f[] = \f[B]string\f[] (default \f[C]pmenu\f[])
Defines the command to produce the jgmenu flavoured CSV for
\f[C]jgmenu\f[].
Accpetable keyword include pmenu, lx, apps and ob.
If a value is given other than these keywords, it will be executed in a
shell (so be careful!).
If left blank, jgmenu will read from \f[B]stdin\f[].
Examples:
.RS
.PP
csv_cmd = lx
.PD 0
.P
.PD
csv_cmd = jgmenu_run lx \-\-no\-dirs
.PD 0
.P
.PD
csv_cmd = cat ~/mymenu.csv
.RE
.TP
.B \f[C]tint2_look\f[] = \f[B]boolean\f[] (default 0)
Read tint2rc and parse config options for colours,\ dimensions and
alignment.
.RS
.RE
.TP
.B \f[C]position_mode\f[] = (fixed | ipc | pointer | center) (default fixed)
Define menu positioning mode
.RS
.PP
fixed: Align to margin_{x,y} in jgmenurc.
Respect \f[C]_NET_WORKAREA\f[].
.PP
ipc: Use IPC to read environment variables set by panel.
.PP
pointer: Launch at pointer.
Respect \f[C]_NET_WORKAREA\f[] and \f[C]edge_snap_x\f[].
.PP
center: Launch at center of screen.
Ignore \f[C]_NET_WORKAREA\f[].
Takess precedence over \f[C]menu_valign\f[] and \f[C]menu_halign\f[]
.RE
.TP
.B \f[C]edge_snap_x\f[] = \f[B]integer\f[] (default 30)
Specify the distance (in pixles) from the left hand edge, within which
the menu will snap to the edge.
Note that this only applies in \f[C]at_pointer\f[] mode.
.RS
.RE
.PP
\f[C]terminal_exec\f[] = \f[B]string\f[] (default x\-terminal\-emulator)
.PD 0
.P
.PD
\f[C]terminal_args\f[] = \f[B]string\f[] (default \-e) : The values of
these two variables are used to build a string to launch programs
requiring a terminal to run.
With the default values, the string would become:
.IP
.nf
\f[C]
`x\-terminal\-emulator\ \-e\ \[aq]some_command\ with\ arguments\[aq]`

`terminal_args`\ must\ finish\ with\ \[aq]\-e\[aq]\ or\ equivalent\ (where\ \[aq]\-e\[aq]\ refers\ to
the\ meaning\ of\ \[aq]\-e\[aq]\ in\ \[aq]xterm\ \-e\[aq].
\f[]
.fi
.TP
.B \f[C]monitor\f[] = \f[B]integer\f[] (default 0)
Specify a particular monitor as an index starting from 1.
If 0, the menu will be launched on the monitor where the mouse is.
.RS
.RE
.TP
.B \f[C]hover_delay\f[] = \f[B]integer\f[] (default 100)
The amount of time (in milliseconds) from hovering over an item until a
submenu is opened.
.RS
.RE
.TP
.B \f[C]hide_back_items\f[] = \f[B]boolean\f[] (default 1)
If enabled, all ^back() items will be suppressed.
As a general rule, it should be set to 1 for a multi\-window menu, and 0
when in single\-window mode.
.RS
.RE
.TP
.B \f[C]columns\f[] = \f[B]integer\f[] (default 1)
Specify the number of columns in which to show menu items
.RS
.RE
.TP
.B \f[C]tabs\f[] = \f[B]integer\f[] (default 120)
Specify the position is pixels of the first tab
.RS
.RE
.PP
\f[C]menu_margin_x\f[] = \f[B]integer\f[] (default 0)
.PD 0
.P
.PD
\f[C]menu_margin_y\f[] = \f[B]integer\f[] (default 0) : "margin" refers
to space outside an object The \f[C]menu_margin_*\f[] variables refer to
the distance between the menu (=X11 window) and the edge of the screen.
See note on \f[C]_NET_WORKAREA\f[] under \f[C]menu_{v,h}align\f[]
variables.
.PP
\f[C]menu_width\f[] = \f[B]integer\f[] (default 200)
.PP
\ \ \ \ Set the \f[I]minimum\f[] menu width.
The menu width will adjust to the
.PD 0
.P
.PD
\ \ \ \ longest item in the current (sub)menu.
If a filter is applied
.PD 0
.P
.PD
\ \ \ \ (e.g.
by the user typing) the menu width will NOT adjust.
.PP
\f[C]menu_height_min\f[] = \f[B]integer\f[] (default 0)
.PD 0
.P
.PD
menu_height_max = \f[B]integer\f[] (default 0)
.PP
\ \ \ \ Set the min and max height of the root menu.
If these are set to
.PD 0
.P
.PD
\ \ \ \ the same value, the menu height will be fixed at that value.
If
.PD 0
.P
.PD
\ \ \ \ set to zero, they will be ignored.
.PP
menu_height_mode = (static | dynamic) (default static)
.PP
\ \ \ \ "static" means that the height of the initial root menu will be
.PD 0
.P
.PD
\ \ \ \ used for any subsequent ^root() action.
.PP
\ \ \ \ "dynamic" means that the root menu height will be re\-calculated
.PD 0
.P
.PD
\ \ \ \ every time the root menu is redefined using ^root().
.PP
menu_padding_top = \f[B]integer\f[] (default 5)
.PD 0
.P
.PD
menu_padding_right = \f[B]integer\f[] (default 5)
.PD 0
.P
.PD
menu_padding_bottom = \f[B]integer\f[] (default 5)
.PD 0
.P
.PD
menu_padding_left = \f[B]integer\f[] (default 5)
.PP
\ \ \ \ "padding" refers to space inside an object (between border and
.PD 0
.P
.PD
\ \ \ \ content)
.PP
menu_radius = \f[B]integer\f[] (default 1)
.PP
\ \ \ \ "radius" refers to the size of rounded corners
.PP
menu_border = \f[B]integer\f[] (default 0)
.PP
\ \ \ \ "border" refers to the border\-thickness
.PP
menu_halign = (left | right | center) (default left)
.PD 0
.P
.PD
menu_valign = (top | bottom | center) (default bottom)
.PP
\ \ \ \ Horizontal and vertical alignment respectively.
.PP
\ \ \ \ Note: If these variables are not set, jgmenu will try to guess
.PD 0
.P
.PD
\ \ \ \ the alignment and margin by reading \f[C]_NET_WORKAREA\f[] and
tint2\[aq]s
.PD 0
.P
.PD
\ \ \ \ config file and environment variables.
.PP
\ \ \ \ \f[C]_NET_WORKAREA\f[] is a freedesktop EWMH root window
property.
Not
.PD 0
.P
.PD
\ \ \ \ all Window Managers and Panels respect these.
.PD 0
.P
.PD
\ \ \ \ Here follow some example of those that do:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ openbox, xfwm4, tint2, polybar
.PD 0
.P
.PD
\ \ \ \ And some that do not:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ awesome, i3, bspwm, plank
.PP
sub_spacing = \f[B]integer\f[] (default 1)
.PP
\ \ \ \ Horizontal space between windows.
A negative value results in
.PD 0
.P
.PD
\ \ \ \ each submenu window overlapping its parent window.
.PP
sub_padding_top = \f[B]integer\f[] (default auto)
.PD 0
.P
.PD
sub_padding_right = \f[B]integer\f[] (default auto)
.PD 0
.P
.PD
sub_padding_bottom = \f[B]integer\f[] (default auto)
.PD 0
.P
.PD
sub_padding_left = \f[B]integer\f[] (default auto)
.PP
\ \ \ \ The same as \f[C]menu_padding_*\f[] but applies to submenu
windows
.PD 0
.P
.PD
\ \ \ \ only.
It understands the keyword \[aq]auto\[aq].
If set to \[aq]auto\[aq], the
.PD 0
.P
.PD
\ \ \ \ smallest of the four \f[C]menu_padding_*\f[] will be used.
.PP
sub_hover_action = \f[B]integer\f[] (default 1)
.PP
\ \ \ \ Open submenu when hovering over item (only works in
multi\-window
.PD 0
.P
.PD
\ \ \ \ mode).
.PP
item_margin_x = \f[B]integer\f[] (default 3)
.PD 0
.P
.PD
item_margin_y = \f[B]integer\f[] (default 3)
.PD 0
.P
.PD
item_height = \f[B]integer\f[] (default 25)
.PD 0
.P
.PD
item_padding_x = \f[B]integer\f[] (default 4)
.PD 0
.P
.PD
item_radius = \f[B]integer\f[] (default 1)
.PD 0
.P
.PD
item_border = \f[B]integer\f[] (default 0)
.PP
\ \ \ \ See equivalent \f[C]menu_\f[] variable definitions.
.PP
item_halign = (left | right) (default left)
.PP
\ \ \ \ Horizontal alignment of actual menu items.
Items are left\-aligned
.PD 0
.P
.PD
\ \ \ \ by default.
If set to right, the option \f[C]arrow_string\f[] should be
.PD 0
.P
.PD
\ \ \ \ changed too.
.PP
sep_height = \f[B]integer\f[] (default 5)
.PP
\ \ \ \ Height of separator without text (defined by ^sep())
.PD 0
.P
.PD
\ \ \ \ Note that separators with text use \f[C]item_height\f[]
.PP
sep_halign = (left | center | right) (default left)
.PP
\ \ \ \ Horizontal alignment of separator text
.PP
sep_markup = \f[B]string\f[] (unset by default)
.PP
\ \ \ \ If specified, \f[C]<span\ $sep_markup>foo</span>\f[] will be
passed to pango
.PD 0
.P
.PD
\ \ \ \ for ^sep(foo).
See the following link for pango attributes:
.PD 0
.P
.PD
\ \ \ \ https://developer.gnome.org/pango/stable/PangoMarkupFormat.html
.PP
\ \ \ \ Keywords include (but are not limited to):
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ font
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ size (x\-small, small, medium, large, x\-large)
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ style (normal, oblique, italic)
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ weight (ultralight, light, normal, bold, ultrabold,
heavy
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ foreground (using format #rrggbb or a colour name)
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ underline (none, single, double)
.PP
\ \ \ \ Example:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \f[C]sep_markup\ =\ font="Sans\ Italic\ 12"\ foreground="blue"\f[]
.PP
font = \f[B]string\f[] (unset by default)
.PP
\ \ \ \ \f[I]font\f[] accepts a string such as \f[I]Cantarell 10\f[] or
.PD 0
.P
.PD
\ \ \ \ \f[I]UbuntuCondensed 11\f[].
The font description without a specified
.PD 0
.P
.PD
\ \ \ \ size unit is interpreted as "points".
If "px" is added, it will
.PD 0
.P
.PD
\ \ \ \ be read as pixels.\ Using "points" enables consistency with
other
.PD 0
.P
.PD
\ \ \ \ applications.
.PP
font_fallback = \f[B]string\f[] (default xtg)
.PP
\ \ \ \ The same as \[aq]icon_theme_fallback\[aq] (see below), except
that
.PD 0
.P
.PD
\ \ \ \ the xsettings variable \[aq]Gtk/FontName\[aq] is read.
.PP
icon_size = \f[B]integer\f[] (default 22)
.PP
\ \ \ \ If icon_size is set to 0, icons will not be searched for and
.PD 0
.P
.PD
\ \ \ \ loaded.
.PP
icon_text_spacing = \f[B]integer\f[] (default 10)
.PP
\ \ \ \ Distance between icon and text.
.PP
icon_theme = \f[B]string\f[] (unset by default)
.PP
\ \ \ \ Specify icon theme.
.PP
icon_theme_fallback = \f[B]string\f[] (default xtg)
.PP
\ \ \ \ Specifies the fallback sources of the icon theme in order of
.PD 0
.P
.PD
\ \ \ \ precedence, where the left\-most letter designates the source
.PD 0
.P
.PD
\ \ \ \ with the highest precedence.
The following are acceptable
.PD 0
.P
.PD
\ \ \ \ characters:
.PP
\ \ \ \ x = xsettings \[aq]Net/IconThemeName\[aq]
.PD 0
.P
.PD
\ \ \ \ t = tint2 config file
.PD 0
.P
.PD
\ \ \ \ g = gtk3.0 config file
.PP
\ \ \ \ \[aq]icon_theme\[aq] takes priority if set.
.PP
\ \ \ \ In order to increase consistency with tint2, xsettings
.PD 0
.P
.PD
\ \ \ \ variables will only be read if the tint2rc variable
.PD 0
.P
.PD
\ \ \ \ launcher_icon_theme_override is zero.
.PP
arrow_string = \f[B]string\f[] (default ▸)
.PP
\ \ \ \ The "arrow" indicates that a menu item points a submenu.
.PD 0
.P
.PD
\ \ \ \ Suggested styles include:
.PD 0
.P
.PD
\ \ \ \ → ▶ ➔ ➙ ➛ ➜ ➝ ➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥ ➦ ↦ ⇒ ⇝ ⇢ ⇥ ⇨ ⇾ ➭ ➮ ➯ ➱ ➲ ➺ ➼ ➽ ➾
.PP
arrow_width = \f[B]integer\f[] (default 15)
.PP
\ \ \ \ Width of area allocated for arrow.
Set to 0 to hide arrow.
.PP
color_menu_bg = \f[B]color\f[] (default #000000 100)
.PP
\ \ \ \ Background colour of menu window
.PP
color_menu_border = \f[B]color\f[] (default #eeeeee 8)
.PP
\ \ \ \ Border colour of menu window
.PP
color_norm_bg = \f[B]color\f[] (default #000000 0)
.PD 0
.P
.PD
color_norm_fg = \f[B]color\f[] (default #eeeeee 100)
.PP
\ \ \ \ Background and foreground (=font) colors of all menu items,
.PD 0
.P
.PD
\ \ \ \ except the one currently selected.
.PP
color_sel_bg = \f[B]color\f[] (default #ffffff 20)
.PD 0
.P
.PD
color_sel_fg = \f[B]color\f[] (default #eeeeee 100)
.PD 0
.P
.PD
color_sel_border = \f[B]color\f[] (default #eeeeee 8)
.PP
\ \ \ \ Background, foreground (=font) and border colors of the
currently
.PD 0
.P
.PD
\ \ \ \ selected menu item.
.PP
color_sep_fg = \f[B]color\f[] (default #ffffff 20)
.PP
\ \ \ \ Colour of seperators without text
.PP
color_title_fg = \f[B]color\f[] (default #eeeeee 50)
.PD 0
.P
.PD
color_title_bg = \f[B]color\f[] (default #000000 0)
.PD 0
.P
.PD
color_title_border = \f[B]color\f[] (default #000000 0)
.PP
\ \ \ \ Foreground (=font), background and border colours of separators
.PD 0
.P
.PD
\ \ \ \ with text (also known as \[aq]title\[aq])
.PD 0
.P
.PD
\ \ \ \ The font colour can be overriden by \[aq]sep_markup\[aq]
.PP
color_scroll_ind = \f[B]color\f[] (default #eeeeee 40)
.PP
\ \ \ \ Colour of scroll indicator lines (which show if there are menu
.PD 0
.P
.PD
\ \ \ \ items above or below those which are visible).
.SS CSV generator variables
.PP
The following variables begin with "csv_" which denotes that they set
.PD 0
.P
.PD
environment variables which are used by the CSV generators.
.PP
csv_name_format = \f[B]string\f[] (default \f[C]%n\ (%g)\f[])
.PP
\ \ \ \ Defines the format of the \f[I]name\f[] field for CSV generators
.PD 0
.P
.PD
\ \ \ \ (currently only applicable to lx).
It understands the following
.PD 0
.P
.PD
\ \ \ \ two fields:
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ %n \- application name
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ %g \- application generic name
.PD 0
.P
.PD
\ \ \ \ If a \f[I]generic name\f[] does not exist or is the same as the
\f[I]name\f[],
.PD 0
.P
.PD
\ \ \ \ %n will be used without any formatting.
.PP
csv_single_window = \f[B]boolean\f[] (default 0)
.PP
\ \ \ \ If set, ^root() will be used instead of ^checkout().
.PD 0
.P
.PD
\ \ \ \ This results in a single window menu, where submenus appear in
.PD 0
.P
.PD
\ \ \ \ the same window.
.PD 0
.P
.PD
\ \ \ \ This is currently only supported by pmenu.
.PP
csv_no_dirs = \f[B]boolean\f[] (default 0)
.PP
\ \ \ \ If set, applications will be listed without any directory
.PD 0
.P
.PD
\ \ \ \ structure.
This is currently only supported by pmenu and lx.
.PD 0
.P
.PD
csv_i18n = \f[B]string\f[] (no default)
.PP
\ \ \ \ If set, the ob module will look for a translation file in the
.PD 0
.P
.PD
\ \ \ \ specified file or directory.
See \f[C]jgmenu_run\ i18n\ \-\-help\f[] for
.PD 0
.P
.PD
\ \ \ \ further details.
.SH Inter\-process Communication (IPC)
.PP
\f[C]jgmenu_run\f[] reads the environment variables listed below and
passes them via a unix socket to the long\-running instance of jgmenu.
On \[aq]wake up\[aq] (=show menu), jgmenu aligns the menu to these
variables.
.PP
\f[C]TINT2_BUTTON_ALIGNED_X1\f[]
.PD 0
.P
.PD
\f[C]TINT2_BUTTON_ALIGNED_X2\f[]
.PD 0
.P
.PD
\f[C]TINT2_BUTTON_ALIGNED_Y1\f[]
.PD 0
.P
.PD
\f[C]TINT2_BUTTON_ALIGNED_Y2\f[]
.PD 0
.P
.PD
\f[C]TINT2_BUTTON_PANEL_X1\f[]
.PD 0
.P
.PD
\f[C]TINT2_BUTTON_PANEL_X2\f[]
.PD 0
.P
.PD
\f[C]TINT2_BUTTON_PANEL_Y1\f[]
.PD 0
.P
.PD
\f[C]TINT2_BUTTON_PANEL_Y2\f[]
.PP
If thse variables are not set, jgmenurc config variables
\f[C]margin_{x,y}\f[] are reverted to.
.SH DIAGRAMS
.SS Vertical Menu
.IP
.nf
\f[C]
╔════════════════════════╗
║\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ item\ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ item\ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ ║
╟────────────────────────╢
║\ \ \ \ \ \ \ \ \ \ \ \ 3\ \ \ \ \ \ \ \ \ \ \ ║
╚════════════════════════╝

1.\ menu_padding_top
2.\ item_margin_y
3.\ menu_padding_bottom
\f[]
.fi
.SS Horizontal Menu
.IP
.nf
\f[C]
╔═╤═╤════════════════╤═╤═╗
║\ │\ │\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │\ │\ ║
║\ │\ ├────────────────┤\ │\ ║
║\ │\ │\ \@\ \ \ \ web\ \ \ \ \ \ >│\ │\ ║
║\ │\ ├────────────────┤\ │\ ║
║2│1│\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │1│3║
║\ │\ ├───┬─┬────────┬─┤\ │\ ║
║\ │\ │\ 4\ │5│\ \ \ \ \ \ \ \ │6│\ │\ ║
║\ │\ ├───┴─┴────────┴─┤\ │\ ║
║\ │\ │\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │\ │\ ║
║\ │\ │\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ │\ │\ ║
╚═╧═╧════════════════╧═╧═╝

1.\ item_margin_x
2.\ padding_left
3.\ padding_right
4.\ icon_size
5.\ icon_to_text_spacing
6.\ arrow_width
\f[]
.fi
.SS External to menu
.IP
.nf
\f[C]
\ \ \ \ screen
\ \ \ \ ╔════════════════════════╗
\ \ \ \ ║\ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
\ \ \ \ ║\ ╭──────┐\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
\ \ \ \ ║\ │\ root\ │\ ╭──────┐\ \ \ \ \ \ ║
\ \ \ \ ║1│\ menu\ │\ │\ sub\ \ │\ \ \ \ \ \ ║
\ \ \ \ ║\ │\ \ \ \ \ \ │3│\ menu\ │\ \ \ \ \ \ ║
\ \ \ \ ║\ └──────┘\ │\ \ \ \ \ \ │\ \ \ \ \ \ ║
\ \ \ \ ║\ \ \ \ \ \ \ \ \ \ └──────┘\ \ \ \ \ \ ║
\ \ \ \ ║\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
\ \ \ \ ║\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
\ \ \ \ ║\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ║
\ \ \ \ ╚════════════════════════╝

1.\ menu_margin_x
2.\ menu_margin_y
3.\ sub_spacing
\f[]
.fi
.SH SEE ALSO
.PP
\f[C]jgmenu_run(1)\f[]
.PD 0
.P
.PD
\f[C]jgmenututorial(7)\f[]
.PP
The jgmenu source code and documentation can be downloaded from
.PD 0
.P
.PD
<https://github.com/johanmalm/jgmenu/>
.SH AUTHORS
Johan Malm.
